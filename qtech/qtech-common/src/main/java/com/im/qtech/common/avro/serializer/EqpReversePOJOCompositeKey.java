/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.im.qtech.common.avro.serializer;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class EqpReversePOJOCompositeKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -1148195102331436738L;


    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EqpReversePOJOCompositeKey\",\"namespace\":\"com.im.qtech.common.avro.serializer\",\"fields\":[{\"name\":\"simId\",\"type\":\"string\"},{\"name\":\"source\",\"type\":\"string\"},{\"name\":\"module\",\"type\":\"string\"},{\"name\":\"chkDt\",\"type\":\"string\"}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<EqpReversePOJOCompositeKey> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<EqpReversePOJOCompositeKey> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<EqpReversePOJOCompositeKey> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<EqpReversePOJOCompositeKey> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<EqpReversePOJOCompositeKey> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this EqpReversePOJOCompositeKey to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a EqpReversePOJOCompositeKey from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a EqpReversePOJOCompositeKey instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static EqpReversePOJOCompositeKey fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private java.lang.CharSequence simId;
    private java.lang.CharSequence source;
    private java.lang.CharSequence module;
    private java.lang.CharSequence chkDt;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public EqpReversePOJOCompositeKey() {
    }

    /**
     * All-args constructor.
     * @param simId The new value for simId
     * @param source The new value for source
     * @param module The new value for module
     * @param chkDt The new value for chkDt
     */
    public EqpReversePOJOCompositeKey(java.lang.CharSequence simId, java.lang.CharSequence source, java.lang.CharSequence module, java.lang.CharSequence chkDt) {
        this.simId = simId;
        this.source = source;
        this.module = module;
        this.chkDt = chkDt;
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return simId;
            case 1:
                return source;
            case 2:
                return module;
            case 3:
                return chkDt;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                simId = (java.lang.CharSequence) value$;
                break;
            case 1:
                source = (java.lang.CharSequence) value$;
                break;
            case 2:
                module = (java.lang.CharSequence) value$;
                break;
            case 3:
                chkDt = (java.lang.CharSequence) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'simId' field.
     * @return The value of the 'simId' field.
     */
    public java.lang.CharSequence getSimId() {
        return simId;
    }


    /**
     * Sets the value of the 'simId' field.
     * @param value the value to set.
     */
    public void setSimId(java.lang.CharSequence value) {
        this.simId = value;
    }

    /**
     * Gets the value of the 'source' field.
     * @return The value of the 'source' field.
     */
    public java.lang.CharSequence getSource() {
        return source;
    }


    /**
     * Sets the value of the 'source' field.
     * @param value the value to set.
     */
    public void setSource(java.lang.CharSequence value) {
        this.source = value;
    }

    /**
     * Gets the value of the 'module' field.
     * @return The value of the 'module' field.
     */
    public java.lang.CharSequence getModule() {
        return module;
    }


    /**
     * Sets the value of the 'module' field.
     * @param value the value to set.
     */
    public void setModule(java.lang.CharSequence value) {
        this.module = value;
    }

    /**
     * Gets the value of the 'chkDt' field.
     * @return The value of the 'chkDt' field.
     */
    public java.lang.CharSequence getChkDt() {
        return chkDt;
    }


    /**
     * Sets the value of the 'chkDt' field.
     * @param value the value to set.
     */
    public void setChkDt(java.lang.CharSequence value) {
        this.chkDt = value;
    }

    /**
     * Creates a new EqpReversePOJOCompositeKey RecordBuilder.
     * @return A new EqpReversePOJOCompositeKey RecordBuilder
     */
    public static com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey.Builder newBuilder() {
        return new com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey.Builder();
    }

    /**
     * Creates a new EqpReversePOJOCompositeKey RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new EqpReversePOJOCompositeKey RecordBuilder
     */
    public static com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey.Builder newBuilder(com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey.Builder other) {
        if (other == null) {
            return new com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey.Builder();
        } else {
            return new com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey.Builder(other);
        }
    }

    /**
     * Creates a new EqpReversePOJOCompositeKey RecordBuilder by copying an existing EqpReversePOJOCompositeKey instance.
     * @param other The existing instance to copy.
     * @return A new EqpReversePOJOCompositeKey RecordBuilder
     */
    public static com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey.Builder newBuilder(com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey other) {
        if (other == null) {
            return new com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey.Builder();
        } else {
            return new com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey.Builder(other);
        }
    }

    /**
     * RecordBuilder for EqpReversePOJOCompositeKey instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EqpReversePOJOCompositeKey>
            implements org.apache.avro.data.RecordBuilder<EqpReversePOJOCompositeKey> {

        private java.lang.CharSequence simId;
        private java.lang.CharSequence source;
        private java.lang.CharSequence module;
        private java.lang.CharSequence chkDt;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.simId)) {
                this.simId = data().deepCopy(fields()[0].schema(), other.simId);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.source)) {
                this.source = data().deepCopy(fields()[1].schema(), other.source);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.module)) {
                this.module = data().deepCopy(fields()[2].schema(), other.module);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.chkDt)) {
                this.chkDt = data().deepCopy(fields()[3].schema(), other.chkDt);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
        }

        /**
         * Creates a Builder by copying an existing EqpReversePOJOCompositeKey instance
         * @param other The existing instance to copy.
         */
        private Builder(com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.simId)) {
                this.simId = data().deepCopy(fields()[0].schema(), other.simId);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.source)) {
                this.source = data().deepCopy(fields()[1].schema(), other.source);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.module)) {
                this.module = data().deepCopy(fields()[2].schema(), other.module);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.chkDt)) {
                this.chkDt = data().deepCopy(fields()[3].schema(), other.chkDt);
                fieldSetFlags()[3] = true;
            }
        }

        /**
         * Gets the value of the 'simId' field.
         * @return The value.
         */
        public java.lang.CharSequence getSimId() {
            return simId;
        }


        /**
         * Sets the value of the 'simId' field.
         * @param value The value of 'simId'.
         * @return This builder.
         */
        public com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey.Builder setSimId(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.simId = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'simId' field has been set.
         * @return True if the 'simId' field has been set, false otherwise.
         */
        public boolean hasSimId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'simId' field.
         * @return This builder.
         */
        public com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey.Builder clearSimId() {
            simId = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'source' field.
         * @return The value.
         */
        public java.lang.CharSequence getSource() {
            return source;
        }


        /**
         * Sets the value of the 'source' field.
         * @param value The value of 'source'.
         * @return This builder.
         */
        public com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey.Builder setSource(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.source = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'source' field has been set.
         * @return True if the 'source' field has been set, false otherwise.
         */
        public boolean hasSource() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'source' field.
         * @return This builder.
         */
        public com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey.Builder clearSource() {
            source = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'module' field.
         * @return The value.
         */
        public java.lang.CharSequence getModule() {
            return module;
        }


        /**
         * Sets the value of the 'module' field.
         * @param value The value of 'module'.
         * @return This builder.
         */
        public com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey.Builder setModule(java.lang.CharSequence value) {
            validate(fields()[2], value);
            this.module = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'module' field has been set.
         * @return True if the 'module' field has been set, false otherwise.
         */
        public boolean hasModule() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'module' field.
         * @return This builder.
         */
        public com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey.Builder clearModule() {
            module = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'chkDt' field.
         * @return The value.
         */
        public java.lang.CharSequence getChkDt() {
            return chkDt;
        }


        /**
         * Sets the value of the 'chkDt' field.
         * @param value The value of 'chkDt'.
         * @return This builder.
         */
        public com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey.Builder setChkDt(java.lang.CharSequence value) {
            validate(fields()[3], value);
            this.chkDt = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'chkDt' field has been set.
         * @return True if the 'chkDt' field has been set, false otherwise.
         */
        public boolean hasChkDt() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'chkDt' field.
         * @return This builder.
         */
        public com.im.qtech.common.avro.serializer.EqpReversePOJOCompositeKey.Builder clearChkDt() {
            chkDt = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public EqpReversePOJOCompositeKey build() {
            try {
                EqpReversePOJOCompositeKey record = new EqpReversePOJOCompositeKey();
                record.simId = fieldSetFlags()[0] ? this.simId : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.source = fieldSetFlags()[1] ? this.source : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.module = fieldSetFlags()[2] ? this.module : (java.lang.CharSequence) defaultValue(fields()[2]);
                record.chkDt = fieldSetFlags()[3] ? this.chkDt : (java.lang.CharSequence) defaultValue(fields()[3]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<EqpReversePOJOCompositeKey>
            WRITER$ = (org.apache.avro.io.DatumWriter<EqpReversePOJOCompositeKey>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<EqpReversePOJOCompositeKey>
            READER$ = (org.apache.avro.io.DatumReader<EqpReversePOJOCompositeKey>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeString(this.simId);

        out.writeString(this.source);

        out.writeString(this.module);

        out.writeString(this.chkDt);

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.simId = in.readString(this.simId instanceof Utf8 ? (Utf8) this.simId : null);

            this.source = in.readString(this.source instanceof Utf8 ? (Utf8) this.source : null);

            this.module = in.readString(this.module instanceof Utf8 ? (Utf8) this.module : null);

            this.chkDt = in.readString(this.chkDt instanceof Utf8 ? (Utf8) this.chkDt : null);

        } else {
            for (int i = 0; i < 4; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.simId = in.readString(this.simId instanceof Utf8 ? (Utf8) this.simId : null);
                        break;

                    case 1:
                        this.source = in.readString(this.source instanceof Utf8 ? (Utf8) this.source : null);
                        break;

                    case 2:
                        this.module = in.readString(this.module instanceof Utf8 ? (Utf8) this.module : null);
                        break;

                    case 3:
                        this.chkDt = in.readString(this.chkDt instanceof Utf8 ? (Utf8) this.chkDt : null);
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}










